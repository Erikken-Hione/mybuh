{"version":3,"sources":["components/Column/Column.js","components/Table/EditableCell.js","redux/actions/updateData.js","components/Popup/PopupContainer.js","components/Popup/SalaryAdder.js","redux/actions/addNewSalary.js","components/Popup/PopupContent.js","components/Salary/Salary.js","components/Table/Table.js","components/AddSaveButton/AddSaveButton.js","redux/actions/addNew.js","redux/actions/saveState.js","App.js","reportWebVitals.js","redux/reducers/dataReducer.js","data/data.js","redux/reducers/index.js","index.js"],"names":["COLUMNS","Header","id","Cell","row","className","onClick","el","document","createElement","value","original","имя","body","appendChild","select","execCommand","removeChild","elementId","index","getElementById","innerHTML","onMouseOut","accessor","style","textAlign","padding","fontSize","cursor","Object","keys","length","minWidth","minHeight","map","slr","EditableCell","initialValue","column","dispatch","useDispatch","useState","setValue","useEffect","onChange","e","target","onBlur","type","payload","styles","popupContent","position","backgroundColor","top","left","transform","width","height","zIndex","overflowX","overflowY","popupOverlay","right","bottom","PopupContainer","open","onClose","children","ReactDom","createPortal","SalaryAdder","rowId","date","setDate","salaryValue","setSalaryValue","PopupContent","salary","useSelector","state","data","оклады","item","defaultValue","Salary","setOpen","Table","DATABASE","defaultColumn","columns","useMemo","tableInstance","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","getRowProps","cells","cell","getCellProps","AddButton","App","AddSaveButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialData","должность","статусы","резидент","пенсионер","инвалид","dataReducer","action","newRow","newState","splice","removed","split","alert","console","log","newSalary","dataset","allReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM"],"mappings":"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","file":"static/js/main.47e8535e.chunk.js","sourcesContent":["export const COLUMNS = [\r\n   {\r\n      Header: () => null,\r\n      id: 'expander',\r\n      Cell: ({ row }) => (\r\n         <div className=\"tooltip\">\r\n            <button onClick={() => {\r\n               const el = document.createElement('textarea');\r\n               el.value = row.original.имя;\r\n               document.body.appendChild(el);\r\n               el.select();\r\n               document.execCommand('copy');\r\n               document.body.removeChild(el);\r\n\r\n               let elementId = \"myTooltip\" + row.index;\r\n               var tooltip = document.getElementById(elementId);\r\n               tooltip.innerHTML = 'Буфер: ' + el.value;\r\n            }}\r\n            \r\n            onMouseOut={() => {\r\n               let elementId = \"myTooltip\" + row.index;\r\n               var tooltip = document.getElementById(elementId);\r\n               tooltip.innerHTML = 'Скопировать';\r\n            }}\r\n\r\n            >\r\n               <span className=\"tooltiptext\" id={\"myTooltip\" + row.index}>Скопировать</span>\r\n               ✎\r\n            </button>\r\n         </div>\r\n      )\r\n   },\r\n   {\r\n      Header: 'Имя Фамилия',\r\n      accessor: 'имя'\r\n   },\r\n   {\r\n      Header: 'Должность',\r\n      accessor: 'должность'\r\n   },\r\n   {\r\n      Header: 'Резидент',\r\n      accessor: 'статусы.резидент'\r\n   },\r\n   {\r\n      Header: 'Пенсионер',\r\n      accessor: 'статусы.пенсионер'\r\n   },\r\n   {\r\n      Header: 'Инвалид',\r\n      accessor: 'статусы.инвалид'\r\n   },\r\n   {\r\n      Header: 'Оклады',\r\n      accessor: 'оклады',\r\n      Cell: row => {\r\n         return (\r\n            <div style={{textAlign: 'left', padding: '2px', fontSize: '14px', cursor: 'pointer'}}>\r\n               {\r\n                  Object.keys(row.value).length === 0\r\n                  ? (\r\n                     <div style={{minWidth: '100%', minHeight: '10px'}}>\r\n                        empty\r\n                     </div>\r\n                  ) : (\r\n                     <div style={{minWidth: '100%', minHeight: '10px'}}>\r\n                        {  \r\n                           row.value.map((slr, index) => (\r\n                              <div key={index}>\r\n                                 <span>{++index}. </span>\r\n                                 <span>[{slr['date']}]: </span>\r\n                                 <span>{slr['value']} KZT</span>\r\n                              </div>\r\n                           ))\r\n                        }\r\n                     </div>\r\n                  )\r\n               }\r\n            </div>\r\n         )\r\n      }\r\n   }\r\n]\r\n","import React, {useState, useEffect} from 'react';\r\nimport { updateData } from '../../redux/actions/updateData';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst EditableCell = ({value: initialValue, row: { index }, column: { id }}) => {\r\n   \r\n   const  dispatch = useDispatch();\r\n   \r\n   const [value, setValue] = useState(initialValue);\r\n\r\n   const onChange = e => {\r\n      setValue(e.target.value)\r\n   }\r\n\r\n   const onBlur = () => {\r\n      dispatch(updateData({value, index, id}))\r\n   }\r\n\r\n   useEffect(() => {\r\n      setValue(initialValue)\r\n   }, [initialValue])\r\n\r\n   return (\r\n      <input value={value} onChange={onChange} onBlur={onBlur}/>\r\n   )\r\n}\r\n\r\nexport default EditableCell;","export const updateData = ( content ) => ({\r\n   type: 'UPDATE',   \r\n   payload: content\r\n})","import React, { Fragment } from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nconst styles = {\r\n   popupContent: {\r\n      position: 'fixed',\r\n      backgroundColor: '#F5FFFA',\r\n      top: '50%',\r\n      left: '50%',\r\n      transform: 'translate(-50%, -50%)',\r\n      width: '35%',\r\n      height: '65%',\r\n      zIndex: 1001,\r\n      overflowX: 'hidden',\r\n      overflowY: 'auto',\r\n      cursor: 'default'\r\n   },\r\n   popupOverlay: {\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\r\n      zIndex: 1000\r\n   }\r\n}\r\n\r\nconst PopupContainer = ({open, onClose, children}) => {\r\n\r\n   if (!open) return null\r\n\r\n   return ReactDom.createPortal(\r\n      <Fragment>\r\n         <div \r\n            style={styles.popupOverlay} \r\n            onClick={onClose}\r\n         />\r\n         <div style={styles.popupContent}>\r\n            {children}\r\n         </div>\r\n      </Fragment>,\r\n      document.getElementById('portal')\r\n   );\r\n}\r\n\r\nexport default PopupContainer;","import React, {useState} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addNewSalary } from '../../redux/actions/addNewSalary';\r\n\r\nconst SalaryAdder = ({ rowId }) => {\r\n\r\n\r\n   const [date, setDate] = useState('');\r\n   const dateHandler = (e) => {\r\n      setDate(e.target.value);\r\n   }\r\n\r\n   const [salaryValue, setSalaryValue] = useState('');\r\n   const valueHandler = (e) => {\r\n      setSalaryValue(e.target.value);\r\n   }\r\n\r\n   let dispatch = useDispatch();\r\n\r\n   const submit = () => {\r\n      if (date && salaryValue) {\r\n         dispatch(addNewSalary({date, salaryValue, rowId}))\r\n         setDate('');\r\n         setSalaryValue('');\r\n      }\r\n   }\r\n\r\n   return (\r\n      <tr>\r\n         <td>\r\n            <input type=\"date\" value={date} onChange={dateHandler}/>\r\n         </td>\r\n         <td>\r\n            <input type=\"text\" value={salaryValue} onChange={valueHandler}/>\r\n         </td>\r\n         <td>\r\n            <button\r\n               onClick={() => submit()}\r\n            >\r\n               +\r\n            </button>\r\n         </td>\r\n      </tr>\r\n   );\r\n}\r\n\r\nexport default SalaryAdder;","export const addNewSalary = ( content ) => ({\r\n   type: 'ADDSALARY',\r\n   payload: content\r\n})","import React, { Fragment } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport SalaryAdder from './SalaryAdder';\r\n\r\nconst PopupContent = ({id}) => {\r\n\r\n   const DATABASE = useSelector(state => state.data)\r\n   const salary = DATABASE[id].оклады;\r\n\r\n   return (\r\n      <Fragment>\r\n         <table>\r\n            <thead>\r\n               <tr>\r\n                  <th>\r\n                     Дата\r\n                  </th>\r\n                  <th>\r\n                     Сумма\r\n                  </th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               {  \r\n                  salary.length\r\n                  ? (\r\n                     salary.map((item, index) => (\r\n                        <tr key={index}>\r\n                           <td>\r\n                              <input type=\"date\" defaultValue={item['date']}/>\r\n                           </td>\r\n                           <td>\r\n                              <input type=\"text\" defaultValue={item['value']}/>\r\n                           </td>\r\n                           <td>\r\n                              KZT\r\n                           </td>\r\n                        </tr>\r\n                     ))\r\n                  ) : (\r\n                     <tr>\r\n                        <td>\r\n                           empty\r\n                        </td>\r\n                        <td>\r\n                           empty\r\n                        </td>\r\n                        <td>\r\n                           KZT\r\n                        </td>\r\n                     </tr>\r\n                  )\r\n               }\r\n               <SalaryAdder rowId={id} />\r\n            </tbody>\r\n         </table>\r\n      </Fragment>\r\n   );\r\n}\r\n\r\nexport default PopupContent;","import React, { useState } from 'react';\r\nimport PopupContainer from '../Popup/PopupContainer';\r\nimport PopupContent from '../Popup/PopupContent';\r\n\r\nconst Salary = ({row}) => {  \r\n\r\n   const [open, setOpen] = useState(false);\r\n\r\n   return (\r\n      <td>\r\n         <button onClick={() => setOpen(true)}>E</button>\r\n\r\n         <PopupContainer open={open} onClose={() => setOpen(false)}>\r\n            <PopupContent id={row.id}/>  \r\n         </PopupContainer>\r\n\r\n      </td>\r\n   );\r\n}\r\n\r\nexport default Salary;\r\n","import React, { useMemo } from 'react';\r\nimport { useTable } from 'react-table';\r\nimport { useSelector } from 'react-redux';\r\nimport { COLUMNS } from '../Column/Column';\r\nimport EditableCell from './EditableCell';\r\nimport './Table.css';\r\nimport Salary from '../Salary/Salary';\r\n\r\nconst Table = () => {\r\n   \r\n   //gettings state from redux's state\r\n   const DATABASE = useSelector(state => state.data);\r\n   \r\n   // Set our editable cell renderer as the default Cell renderer\r\n   const defaultColumn = {\r\n      Cell: EditableCell,\r\n    }\r\n\r\n   //documentation\r\n   //render only if there are some changes\r\n   const columns = useMemo(() => COLUMNS, []);\r\n   const data = useMemo(() => DATABASE, [DATABASE]);\r\n\r\n   const tableInstance = useTable({\r\n      columns,\r\n      data,\r\n      defaultColumn\r\n   });\r\n\r\n   //getting table components\r\n   const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\r\n\r\n   return (\r\n      <table {...getTableProps()}>\r\n         <thead>\r\n            {\r\n               headerGroups.map((headerGroup) => (\r\n                  <tr {...headerGroup.getHeaderGroupProps()}>\r\n                     {\r\n                        headerGroup.headers.map((column) => (\r\n                           <th {...column.getHeaderProps()}>\r\n                              {\r\n                                 column.render('Header')\r\n                              }\r\n                           </th>\r\n                        ))\r\n                     }\r\n                  </tr>\r\n               ))\r\n            }\r\n         </thead>\r\n         <tbody {...getTableBodyProps()}>\r\n            {\r\n               rows.map((row) => {\r\n                  prepareRow(row);\r\n                  return (\r\n                     <tr {...row.getRowProps()}>\r\n                        {\r\n                           row.cells.map( cell => (\r\n                              <td {...cell.getCellProps()}>\r\n                                 {\r\n                                    cell.render('Cell')\r\n                                 } \r\n                              </td>\r\n                           ))\r\n                        }\r\n\r\n                        <Salary row={row}/>    \r\n                     </tr>\r\n                  )\r\n               })\r\n            }\r\n         </tbody>\r\n      </table>\r\n   );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport { addNew } from '../../redux/actions/addNew';\r\nimport { saveState } from '../../redux/actions/saveState';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst AddButton = () => {\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   return (\r\n      <div>\r\n         <button onClick={() => dispatch(addNew())}>\r\n            Добавить\r\n         </button>\r\n         <button onClick={() => dispatch(saveState())}>\r\n            Сохранить\r\n         </button>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default AddButton;","export const addNew = () => ({\r\n   type: 'ADD'\r\n})","export const saveState = () => ({\r\n   type: 'SAVE'\r\n})","import React from 'react';\nimport Table from './components/Table/Table';\nimport AddSaveButton from './components/AddSaveButton/AddSaveButton';\n\nfunction App() {\n  return (\n    <div>\n      <Table />\n      <AddSaveButton />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import DATABASE from '../../data/data';\r\n\r\nlet initialData = DATABASE; \r\n\r\nconst dataReducer = ( state = initialData, action ) => {\r\n   switch (action.type) {\r\n      //ADD NEW ROW\r\n      case 'ADD':\r\n         const newRow = {\r\n            имя: '',\r\n            должность: '',\r\n            статусы: {\r\n                резидент: '',\r\n                пенсионер: '',\r\n                инвалид: '',\r\n            },\r\n            оклады: []\r\n         }   \r\n         const newState = [...state, newRow];\r\n         return newState;\r\n      \r\n      //UPDATE CELL\r\n      case 'UPDATE':\r\n         const { value, index, id } = action.payload;\r\n         \r\n         const data = [...state];\r\n         \r\n         const [removed] = data.splice(index, 1);\r\n         const keys = id.split('.');\r\n\r\n         if (keys.length < 2) {\r\n            removed[id] = value;\r\n            data.splice(index, 0, removed);\r\n         } else {\r\n            removed[keys[0]][keys[1]] = value;\r\n            data.splice(index, 0, removed);\r\n         }\r\n         return data;\r\n\r\n      //IMITATE SAVING PROCESS\r\n      case 'SAVE':\r\n         alert('Проверьте log');\r\n         console.log(state);\r\n         return state;\r\n      \r\n      //ADD NEW SALARY\r\n      case 'ADDSALARY':\r\n         const { date, salaryValue, rowId } = action.payload;\r\n         const newSalary = {\r\n            'date': date,\r\n            'value': salaryValue\r\n         } \r\n\r\n         const dataset = [...state];\r\n         const row = [...dataset[rowId].оклады, newSalary]\r\n         dataset[rowId].оклады = row;\r\n\r\n         return dataset;     \r\n\r\n      //default case - return current state\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n\r\nexport default dataReducer;","const DATABASE = [\r\n    {\r\n        имя: 'Иван Иваныч',\r\n        должность: 'Директор',\r\n        статусы: {\r\n            резидент: 'да',\r\n            пенсионер: 'нет',\r\n            инвалид: 'нет',\r\n        },\r\n        оклады: [\r\n            {\r\n                'date': '2010-10-10',\r\n                'value': '85000'\r\n            },\r\n            {\r\n                'date': '2015-05-15',\r\n                'value': '130000'\r\n            },\r\n            {\r\n                'date': '2020-01-01',\r\n                'value': '180000'\r\n            }\r\n        ]\r\n    } \r\n]\r\n\r\nexport default DATABASE;","import { combineReducers } from 'redux';\r\nimport dataReducer from './dataReducer';\r\n\r\nconst allReducer = combineReducers({\r\n   data: dataReducer\r\n})\r\n\r\nexport default allReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport  allReducer  from './redux/reducers';\nimport { composeWithDevTools} from 'redux-devtools-extension';\n\n//store redux\nlet store = createStore(allReducer, composeWithDevTools());\n\n\nReactDOM.render(\n  <Provider store={store}> \n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}